{"version":3,"sources":["../src/wampy.js"],"names":["Cu","Components","utils","import","setTimeout","console","WAMP_MSG_SPEC","WAMP_ERROR_MSG","getWebSocket","JsonSerializer","Wampy","url","options","version","_url","_protocols","_wamp_features","agent","roles","publisher","features","subscriber_blackwhite_listing","publisher_exclusion","publisher_identification","subscriber","pattern_based_subscription","publication_trustlevels","caller","caller_identification","progressive_call_results","call_canceling","call_timeout","callee","call_trustlevels","pattern_based_registration","shared_registration","_cache","sessionId","reqId","server_wamp_features","isSayingGoodbye","opStatus","code","description","timer","reconnectingAttempts","_ws","_wsQueue","_requests","_calls","_subscriptions","_subsTopics","Set","_rpcRegs","_rpcNames","_options","debug","autoReconnect","reconnectInterval","maxRetries","realm","helloCustomDetails","authid","authmethods","onChallenge","onConnect","onClose","onError","onReconnect","onReconnectSuccess","ws","serializer","_isPlainObject","_merge","connect","args","log","obj","l","length","i","attr","Array","isArray","Object","unshift","protocol","topicType","role","callbacks","flag","toUpperCase","_validateURI","topic","patternBased","allowWAMP","URI_ERROR","error","uri","reBase","rePattern","re","test","indexOf","msg","encode","e","_hardClose","decode","errorUri","details","_log","_send","ABORT","message","close","push","_encode","readyState","send","shift","onopen","_wsOnOpen","onclose","_wsOnClose","event","onmessage","_wsOnMessage","onerror","_wsOnError","serverProtocol","split","NO_SERIALIZER_AVAILABLE","isBinary","binaryType","HELLO","_wsReconnect","_resetState","_decode","data","then","id","p","self","WELCOME","_renewSubscriptions","_renewRegistrations","CHALLENGE","Promise","resolve","reject","key","AUTHENTICATE","catch","CRA_EXCEPTION","NO_CRA_CB_OR_ID","GOODBYE","ERROR","SUBSCRIBE","UNSUBSCRIBE","PUBLISH","REGISTER","UNREGISTER","argsList","argsDict","CALL","SUBSCRIBED","onEvent","add","onSuccess","UNSUBSCRIBED","has","delete","PUBLISHED","EVENT","RESULT","progress","REGISTERED","rpc","UNREGISTERED","INVOCATION","invoke_result_handler","YIELD","results","_isArray","invoke_error_handler","result_handler","error_handler","NON_EXIST_RPC_INVOCATION","_initWsCallbacks","subs","st","subscribe","rpcs","rn","rpcName","register","opts","authp","_setWsProtocols","NO_WS_OR_URL","NO_REALM","SUCCESS","topicURI","advancedOptions","hasOwnProperty","match","_preReqChecks","NO_CALLBACK_SPEC","_getReqId","splice","NON_EXIST_UNSUBSCRIBE","payload","err","hasPayload","_optionsConvertHelper","option","sourceType","acknowledge","exclude_me","disclose_me","INVALID_PARAM","arguments","receive_progress","timeout","NON_EXIST_RPC_REQ_ID","mode","CANCEL","invoke","force_reregister","RPC_ALREADY_REGISTERED","NON_EXIST_RPC_UNREG","EXPORTED_SYMBOLS"],"mappings":"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","file":"wampy.js","sourcesContent":["const Cu = Components.utils;\n\n// Import things from JSmodules as these are absent in Browser Add-on environment.\nconst { setTimeout } = Cu.import('resource://gre/modules/Timer.jsm', {});\nconst { console }    = Cu.import('resource://gre/modules/devtools/Console.jsm', {});\n\n/**\n * Project: wampy.js\n *\n * https://github.com/KSDaemon/wampy.js\n *\n * A lightweight client-side implementation of\n * WAMP (The WebSocket Application Messaging Protocol v2)\n * http://wamp.ws\n *\n * Provides asynchronous RPC/PubSub over WebSocket.\n *\n * Copyright 2014 KSDaemon. Licensed under the MIT License.\n * See @license text at http://www.opensource.org/licenses/mit-license.php\n *\n */\n\nconst { WAMP_MSG_SPEC, WAMP_ERROR_MSG } = Cu.import('resource://getbot/wampy/constants.js', {});\nconst { getWebSocket } = Cu.import('resource://getbot/wampy/utils.js', {});\nconst { JsonSerializer } = Cu.import('resource://getbot/wampy/serializers/JsonSerializer.js', {});\n\n/**\n * WAMP Client Class\n */\nclass Wampy {\n\n    /**\n     * Wampy constructor\n     * @param {string} [url]\n     * @param {Object} [options]\n     */\n    constructor (url, options) {\n\n        /**\n         * Wampy version\n         * @type {string}\n         * @private\n         */\n        this.version = 'v6.1.0';\n\n        /**\n         * WS Url\n         * @type {string}\n         * @private\n         */\n        this._url = (typeof url === 'string') ? url : null;\n\n        /**\n         * WS protocols\n         * @type {Array}\n         * @private\n         */\n        this._protocols = ['wamp.2.json'];\n\n        /**\n         * WAMP features, supported by Wampy\n         * @type {object}\n         * @private\n         */\n        this._wamp_features = {\n            agent: 'Wampy.js ' + this.version,\n            roles: {\n                publisher: {\n                    features: {\n                        subscriber_blackwhite_listing: true,\n                        publisher_exclusion: true,\n                        publisher_identification: true\n                    }\n                },\n                subscriber: {\n                    features: {\n                        pattern_based_subscription: true,\n                        publication_trustlevels: true\n                    }\n                },\n                caller: {\n                    features: {\n                        caller_identification: true,\n                        progressive_call_results: true,\n                        call_canceling: true,\n                        call_timeout: true\n                    }\n                },\n                callee: {\n                    features: {\n                        caller_identification: true,\n                        call_trustlevels: true,\n                        pattern_based_registration: true,\n                        shared_registration: true\n                    }\n                }\n            }\n        };\n\n        /**\n         * Internal cache for object lifetime\n         * @type {Object}\n         * @private\n         */\n        this._cache = {\n            /**\n             * WAMP Session ID\n             * @type {string}\n             */\n            sessionId: null,\n\n            /**\n             * WAMP Session scope requests ID\n             * @type {int}\n             */\n            reqId: 0,\n\n            /**\n             * Server WAMP roles and features\n             */\n            server_wamp_features: { roles: {} },\n\n            /**\n             * Are we in state of saying goodbye\n             * @type {boolean}\n             */\n            isSayingGoodbye: false,\n\n            /**\n             * Status of last operation\n             */\n            opStatus: { code: 0, description: 'Success!', reqId: 0 },\n\n            /**\n             * Timer for reconnection\n             * @type {null}\n             */\n            timer: null,\n\n            /**\n             * Reconnection attempts\n             * @type {number}\n             */\n            reconnectingAttempts: 0\n        };\n\n        /**\n         * WebSocket object\n         * @type {Object}\n         * @private\n         */\n        this._ws = null;\n\n        /**\n         * Internal queue for websocket requests, for case of disconnect\n         * @type {Array}\n         * @private\n         */\n        this._wsQueue = [];\n\n        /**\n         * Internal queue for wamp requests\n         * @type {object}\n         * @private\n         */\n        this._requests = {};\n\n        /**\n         * Stored RPC\n         * @type {object}\n         * @private\n         */\n        this._calls = {};\n\n        /**\n         * Stored Pub/Sub\n         * @type {object}\n         * @private\n         */\n        this._subscriptions = {};\n\n        /**\n         * Stored Pub/Sub topics\n         * @type {Array}\n         * @private\n         */\n        this._subsTopics = new Set();\n\n        /**\n         * Stored RPC Registrations\n         * @type {object}\n         * @private\n         */\n        this._rpcRegs = {};\n\n        /**\n         * Stored RPC names\n         * @type {Array}\n         * @private\n         */\n        this._rpcNames = new Set();\n\n        /**\n         * Options hash-table\n         * @type {Object}\n         * @private\n         */\n        this._options = {\n            /**\n             * Logging\n             * @type {boolean}\n             */\n            debug: false,\n\n            /**\n             * Reconnecting flag\n             * @type {boolean}\n             */\n            autoReconnect: true,\n\n            /**\n             * Reconnecting interval (in ms)\n             * @type {number}\n             */\n            reconnectInterval: 2 * 1000,\n\n            /**\n             * Maximum reconnection retries\n             * @type {number}\n             */\n            maxRetries: 25,\n\n            /**\n             * WAMP Realm to join\n             * @type {string}\n             */\n            realm: null,\n\n            /**\n             * Custom attributes to send to router on hello\n             * @type {object}\n             */\n            helloCustomDetails: null,\n\n            /**\n             * Authentication id to use in challenge\n             * @type {string}\n             */\n            authid: null,\n\n            /**\n             * Supported authentication methods\n             * @type {array}\n             */\n            authmethods: [],\n\n            /**\n             * onChallenge callback\n             * @type {function}\n             */\n            onChallenge: null,\n\n            /**\n             * onConnect callback\n             * @type {function}\n             */\n            onConnect: null,\n\n            /**\n             * onClose callback\n             * @type {function}\n             */\n            onClose: null,\n\n            /**\n             * onError callback\n             * @type {function}\n             */\n            onError: null,\n\n            /**\n             * onReconnect callback\n             * @type {function}\n             */\n            onReconnect: null,\n\n            /**\n             * onReconnectSuccess callback\n             * @type {function}\n             */\n            onReconnectSuccess: null,\n\n            /**\n             * User provided WebSocket class\n             * @type {function}\n             */\n            ws: null,\n\n            /**\n             * User provided msgpack class\n             * @type {object}\n             */\n            serializer: new JsonSerializer()\n        };\n\n        if (this._isPlainObject(options)) {\n            this._options = this._merge(this._options, options);\n        } else if (this._isPlainObject(url)) {\n            this._options = this._merge(this._options, url);\n        }\n\n        if (this._url) {\n            this.connect();\n        }\n\n    }\n\n    /* Internal utils methods */\n    /**\n     * Internal logger\n     * @private\n     */\n    _log (...args) {\n        if (this._options.debug) {\n            console.log(args);\n        }\n    }\n\n    /**\n     * Get the new unique request id\n     * @returns {number}\n     * @private\n     */\n    _getReqId () {\n        return ++this._cache.reqId;\n    }\n\n    /**\n     * Merge argument objects into one\n     * @returns {Object}\n     * @private\n     */\n    _merge (...args) {\n        const obj = {}, l = args.length;\n        let i, attr;\n\n        for (i = 0; i < l; i++) {\n            for (attr in args[i]) {\n                obj[attr] = args[i][attr];\n            }\n        }\n\n        return obj;\n    }\n\n    /**\n     * Check if value is array\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isArray (obj) {\n        return (!!obj) && (Array.isArray(obj));\n    }\n\n    /**\n     * Check if value is object literal\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isPlainObject (obj) {\n        return (!!obj) && (obj === Object(obj));\n    }\n\n    /**\n     * Fix websocket protocols based on options\n     * @private\n     */\n    _setWsProtocols () {\n        if (!(this._options.serializer instanceof JsonSerializer)) {\n            this._protocols.unshift('wamp.2.' + this._options.serializer.protocol);\n        }\n    }\n\n    /**\n     * Prerequisite checks for any wampy api call\n     * @param {object} topicType { topic: URI, patternBased: true|false, allowWAMP: true|false }\n     * @param {string} role\n     * @param {object} callbacks\n     * @returns {boolean}\n     * @private\n     */\n    _preReqChecks (topicType, role, callbacks) {\n        let flag = true;\n\n        if (this._cache.sessionId && !this._cache.server_wamp_features.roles[role]) {\n            this._cache.opStatus = WAMP_ERROR_MSG['NO_' + role.toUpperCase()];\n            flag = false;\n        }\n\n        if (topicType && !this._validateURI(topicType.topic, topicType.patternBased, topicType.allowWAMP)) {\n            this._cache.opStatus = WAMP_ERROR_MSG.URI_ERROR;\n            flag = false;\n        }\n\n        if (flag) {\n            return true;\n        }\n\n        if (this._isPlainObject(callbacks) && callbacks.onError) {\n            callbacks.onError({ error: this._cache.opStatus.description });\n        }\n\n        return false;\n    }\n\n    /**\n     * Validate uri\n     * @param {string} uri\n     * @param {boolean} patternBased\n     * @param {boolean} allowWAMP\n     * @returns {boolean}\n     * @private\n     */\n    _validateURI (uri, patternBased, allowWAMP) {\n        const reBase = /^([0-9a-zA-Z_]+\\.)*([0-9a-zA-Z_]+)$/;\n        const rePattern = /^([0-9a-zA-Z_]+\\.{1,2})*([0-9a-zA-Z_]+)$/;\n        const re = patternBased ? rePattern : reBase;\n\n        if (allowWAMP) {\n            return re.test(uri);\n        } else {\n            return !(!re.test(uri) || uri.indexOf('wamp.') === 0);\n        }\n    }\n\n    /**\n     * Encode WAMP message\n     * @param {Array} msg\n     * @returns {*}\n     * @private\n     */\n    _encode (msg) {\n        try {\n            return this._options.serializer.encode(msg);\n        } catch (e) {\n            this._hardClose('wamp.error.protocol_violation', 'Can not encode message');\n        }\n    }\n\n    /**\n     * Decode WAMP message\n     * @param  msg\n     * @returns {Promise}\n     * @private\n     */\n    _decode (msg) {\n        return this._options.serializer.decode(msg);\n    }\n\n    /**\n     * Hard close of connection due to protocol violations\n     * @param {string} errorUri\n     * @param {string} details\n     * @private\n     */\n    _hardClose (errorUri, details) {\n        this._log('[wampy] ' + details);\n        // Cleanup outgoing message queue\n        this._wsQueue = [];\n        this._send([WAMP_MSG_SPEC.ABORT, { message: details }, errorUri]);\n\n        if (this._options.onError) {\n            this._options.onError({ error: errorUri, details: details });\n        }\n        this._ws.close();\n    }\n\n    /**\n     * Send encoded message to server\n     * @param {Array} msg\n     * @private\n     */\n    _send (msg) {\n        if (msg) {\n            this._wsQueue.push(this._encode(msg));\n        }\n\n        if (this._ws && this._ws.readyState === 1 && this._cache.sessionId) {\n            while (this._wsQueue.length) {\n                this._ws.send(this._wsQueue.shift());\n            }\n        }\n    }\n\n    /**\n     * Reset internal state and cache\n     * @private\n     */\n    _resetState () {\n        this._wsQueue = [];\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n        this._requests = {};\n        this._calls = {};\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        // Just keep attrs that are have to be present\n        this._cache = {\n            reqId: 0,\n            reconnectingAttempts: 0\n        };\n    }\n\n    /**\n     * Initialize internal websocket callbacks\n     * @private\n     */\n    _initWsCallbacks () {\n        if (this._ws) {\n            this._ws.onopen = () => {\n                this._wsOnOpen();\n            };\n            this._ws.onclose = event => {\n                this._wsOnClose(event);\n            };\n            this._ws.onmessage = event => {\n                this._wsOnMessage(event);\n            };\n            this._ws.onerror = error => {\n                this._wsOnError(error);\n            };\n        }\n    }\n\n    /**\n     * Internal websocket on open callback\n     * @private\n     */\n    _wsOnOpen () {\n        const options = this._merge(this._options.helloCustomDetails, this._wamp_features),\n            serverProtocol = this._ws.protocol ? this._ws.protocol.split('.')[2] : '';\n\n        if (this._options.authid) {\n            options.authmethods = this._options.authmethods;\n            options.authid = this._options.authid;\n        }\n\n        this._log('[wampy] websocket connected');\n\n        if (this._options.serializer.protocol !== serverProtocol) {\n            // Server have chosen not our preferred protocol\n\n            // Falling back to json if possible\n            if (serverProtocol === 'json') {\n                this._options.serializer = new JsonSerializer();\n            } else {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_SERIALIZER_AVAILABLE;\n                return this;\n            }\n\n        }\n\n        if (this._options.serializer.isBinary) {\n            this._ws.binaryType = 'arraybuffer';\n        }\n\n        // WAMP SPEC: [HELLO, Realm|uri, Details|dict]\n        // Sending directly 'cause it's a hello msg and no sessionId check is needed\n        this._ws.send(this._encode([WAMP_MSG_SPEC.HELLO, this._options.realm, options]));\n    }\n\n    /**\n     * Internal websocket on close callback\n     * @param {object} event\n     * @private\n     */\n    _wsOnClose (event) {\n        this._log('[wampy] websocket disconnected. Info: ', event);\n\n        // Automatic reconnection\n        if ((this._cache.sessionId || this._cache.reconnectingAttempts) &&\n            this._options.autoReconnect && this._cache.reconnectingAttempts < this._options.maxRetries && !this._cache.isSayingGoodbye) {\n            this._cache.sessionId = null;\n            this._cache.timer = setTimeout(() => { this._wsReconnect(); }, this._options.reconnectInterval);\n        } else {\n            // No reconnection needed or reached max retries count\n            if (this._options.onClose) {\n                this._options.onClose();\n            }\n\n            this._resetState();\n            this._ws = null;\n        }\n    }\n\n    /**\n     * Internal websocket on event callback\n     * @param {object} event\n     * @private\n     */\n    _wsOnMessage (event) {\n        this._decode(event.data).then(data => {\n\n            this._log('[wampy] websocket message received: ', data);\n\n            let id, i, p, self = this;\n\n            switch (data[0]) {\n                case WAMP_MSG_SPEC.WELCOME:\n                    // WAMP SPEC: [WELCOME, Session|id, Details|dict]\n                    if (this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received WELCOME message after session was established');\n                    } else {\n                        this._cache.sessionId = data[1];\n                        this._cache.server_wamp_features = data[2];\n\n                        if (this._cache.reconnectingAttempts) {\n                            // There was reconnection\n\n                            this._cache.reconnectingAttempts = 0;\n\n                            if (this._options.onReconnectSuccess) {\n                                this._options.onReconnectSuccess();\n                            }\n\n                            // Let's renew all previous state\n                            this._renewSubscriptions();\n                            this._renewRegistrations();\n\n                        } else {\n                            // Firing onConnect event on real connection to WAMP server\n                            if (this._options.onConnect) {\n                                this._options.onConnect();\n                            }\n                        }\n\n                        // Send local queue if there is something out there\n                        this._send();\n                    }\n                    break;\n                case WAMP_MSG_SPEC.ABORT:\n                    // WAMP SPEC: [ABORT, Details|dict, Reason|uri]\n                    if (this._options.onError) {\n                        this._options.onError({ error: data[2], details: data[1] });\n                    }\n                    this._ws.close();\n                    break;\n                case WAMP_MSG_SPEC.CHALLENGE:\n                    // WAMP SPEC: [CHALLENGE, AuthMethod|string, Extra|dict]\n                    if (this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received CHALLENGE message after session was established');\n                    } else {\n                        if (this._options.authid && typeof this._options.onChallenge === 'function') {\n\n                            p = new Promise((resolve, reject) => {\n                                resolve(this._options.onChallenge(data[1], data[2]));\n                            });\n\n                            p.then((key) => {\n\n                                // Sending directly 'cause it's a challenge msg and no sessionId check is needed\n                                this._ws.send(this._encode([WAMP_MSG_SPEC.AUTHENTICATE, key, {}]));\n\n                            }).catch(e => {\n                                this._ws.send(this._encode([\n                                    WAMP_MSG_SPEC.ABORT,\n                                    { message: 'Exception in onChallenge handler raised!' },\n                                    'wamp.error.cannot_authenticate'\n                                ]));\n                                if (this._options.onError) {\n                                    this._options.onError({ error: WAMP_ERROR_MSG.CRA_EXCEPTION.description });\n                                }\n                                this._ws.close();\n                                this._cache.opStatus = WAMP_ERROR_MSG.CRA_EXCEPTION;\n                            });\n\n                        } else {\n\n                            this._ws.send(this._encode([\n                                WAMP_MSG_SPEC.ABORT,\n                                { message: WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description },\n                                'wamp.error.cannot_authenticate'\n                            ]));\n                            if (this._options.onError) {\n                                this._options.onError({ error: WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description });\n                            }\n                            this._ws.close();\n                            this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.GOODBYE:\n                    // WAMP SPEC: [GOODBYE, Details|dict, Reason|uri]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received GOODBYE message before session was established');\n                    } else {\n                        if (!this._cache.isSayingGoodbye) {    // get goodbye, initiated by server\n                            this._cache.isSayingGoodbye = true;\n                            this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.close.goodbye_and_out']);\n                        }\n                        this._cache.sessionId = null;\n                        this._ws.close();\n                    }\n                    break;\n                case WAMP_MSG_SPEC.ERROR:\n                    // WAMP SPEC: [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict,\n                    //             Error|uri, (Arguments|list, ArgumentsKw|dict)]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received ERROR message before session was established');\n                    } else {\n                        switch (data[1]) {\n                            case WAMP_MSG_SPEC.SUBSCRIBE:\n                            case WAMP_MSG_SPEC.UNSUBSCRIBE:\n                            case WAMP_MSG_SPEC.PUBLISH:\n                            case WAMP_MSG_SPEC.REGISTER:\n                            case WAMP_MSG_SPEC.UNREGISTER:\n\n                                this._requests[data[2]] && this._requests[data[2]].callbacks.onError &&\n                                this._requests[data[2]].callbacks.onError({\n                                    error: data[4],\n                                    details: data[3],\n                                    argsList: data[5],\n                                    argsDict: data[6]\n                                });\n                                delete this._requests[data[2]];\n\n                                break;\n                            // case WAMP_MSG_SPEC.INVOCATION:\n                            //     break;\n                            case WAMP_MSG_SPEC.CALL:\n\n                                // WAMP SPEC: [ERROR, CALL, CALL.Request|id, Details|dict,\n                                //             Error|uri, Arguments|list, ArgumentsKw|dict]\n                                this._calls[data[2]] && this._calls[data[2]].onError &&\n                                this._calls[data[2]].onError({\n                                    error: data[4],\n                                    details: data[3],\n                                    argsList: data[5],\n                                    argsDict: data[6]\n                                });\n                                delete this._calls[data[2]];\n\n                                break;\n                            default:\n                                this._hardClose('wamp.error.protocol_violation', 'Received invalid ERROR message');\n                                break;\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.SUBSCRIBED:\n                    // WAMP SPEC: [SUBSCRIBED, SUBSCRIBE.Request|id, Subscription|id]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received SUBSCRIBED message before session was established');\n                    } else {\n                        if (this._requests[data[1]]) {\n                            this._subscriptions[this._requests[data[1]].topic] = this._subscriptions[data[2]] = {\n                                id: data[2],\n                                callbacks: [this._requests[data[1]].callbacks.onEvent]\n                            };\n\n                            this._subsTopics.add(this._requests[data[1]].topic);\n\n                            if (this._requests[data[1]].callbacks.onSuccess) {\n                                this._requests[data[1]].callbacks.onSuccess();\n                            }\n\n                            delete this._requests[data[1]];\n\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.UNSUBSCRIBED:\n                    // WAMP SPEC: [UNSUBSCRIBED, UNSUBSCRIBE.Request|id]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received UNSUBSCRIBED message before session was established');\n                    } else {\n                        if (this._requests[data[1]]) {\n                            id = this._subscriptions[this._requests[data[1]].topic].id;\n                            delete this._subscriptions[this._requests[data[1]].topic];\n                            delete this._subscriptions[id];\n\n                            if (this._subsTopics.has(this._requests[data[1]].topic)) {\n                                this._subsTopics.delete(this._requests[data[1]].topic);\n                            }\n\n                            if (this._requests[data[1]].callbacks.onSuccess) {\n                                this._requests[data[1]].callbacks.onSuccess();\n                            }\n\n                            delete this._requests[data[1]];\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.PUBLISHED:\n                    // WAMP SPEC: [PUBLISHED, PUBLISH.Request|id, Publication|id]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received PUBLISHED message before session was established');\n                    } else {\n                        if (this._requests[data[1]]) {\n                            if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                                this._requests[data[1]].callbacks.onSuccess();\n                            }\n\n                            delete this._requests[data[1]];\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.EVENT:\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received EVENT message before session was established');\n                    } else {\n                        if (this._subscriptions[data[1]]) {\n\n                            // WAMP SPEC: [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id,\n                            //             Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentKw|dict]\n\n                            i = this._subscriptions[data[1]].callbacks.length;\n                            while (i--) {\n                                this._subscriptions[data[1]].callbacks[i]({\n                                    details: data[3],\n                                    argsList: data[4],\n                                    argsDict: data[5]\n                                });\n                            }\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.RESULT:\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received RESULT message before session was established');\n                    } else {\n                        if (this._calls[data[1]]) {\n\n                            // WAMP SPEC: [RESULT, CALL.Request|id, Details|dict,\n                            //             YIELD.Arguments|list, YIELD.ArgumentsKw|dict]\n\n                            this._calls[data[1]].onSuccess({\n                                details: data[2],\n                                argsList: data[3],\n                                argsDict: data[4]\n                            });\n                            if (!(data[2].progress && data[2].progress === true)) {\n                                // We receive final result (progressive or not)\n                                delete this._calls[data[1]];\n                            }\n                        }\n                    }\n                    break;\n                // case WAMP_MSG_SPEC.REGISTER:\n                //     // WAMP SPEC:\n                //     break;\n                case WAMP_MSG_SPEC.REGISTERED:\n                    // WAMP SPEC: [REGISTERED, REGISTER.Request|id, Registration|id]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received REGISTERED message before session was established');\n                    } else {\n                        if (this._requests[data[1]]) {\n                            this._rpcRegs[this._requests[data[1]].topic] = this._rpcRegs[data[2]] = {\n                                id: data[2],\n                                callbacks: [this._requests[data[1]].callbacks.rpc]\n                            };\n\n                            this._rpcNames.add(this._requests[data[1]].topic);\n\n                            if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                                this._requests[data[1]].callbacks.onSuccess();\n                            }\n\n                            delete this._requests[data[1]];\n                        }\n                    }\n                    break;\n                // case WAMP_MSG_SPEC.UNREGISTER:\n                //     // WAMP SPEC:\n                //     break;\n                case WAMP_MSG_SPEC.UNREGISTERED:\n                    // WAMP SPEC: [UNREGISTERED, UNREGISTER.Request|id]\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received UNREGISTERED message before session was established');\n                    } else {\n                        if (this._requests[data[1]]) {\n                            id = this._rpcRegs[this._requests[data[1]].topic].id;\n                            delete this._rpcRegs[this._requests[data[1]].topic];\n                            delete this._rpcRegs[id];\n\n                            if (this._rpcNames.has(this._requests[data[1]].topic)) {\n                                this._rpcNames.delete(this._requests[data[1]].topic);\n                            }\n\n                            if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                                this._requests[data[1]].callbacks.onSuccess();\n                            }\n\n                            delete this._requests[data[1]];\n                        }\n                    }\n                    break;\n                case WAMP_MSG_SPEC.INVOCATION:\n                    if (!this._cache.sessionId) {\n                        this._hardClose('wamp.error.protocol_violation',\n                            'Received INVOCATION message before session was established');\n                    } else {\n                        if (this._rpcRegs[data[2]]) {\n\n                            // WAMP SPEC: [INVOCATION, Request|id, REGISTERED.Registration|id,\n                            //             Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]\n\n                            let invoke_result_handler = results => {\n                                    // WAMP SPEC: [YIELD, INVOCATION.Request|id, Options|dict, (Arguments|list,\n                                    // ArgumentsKw|dict)]\n                                    let msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n\n                                    if (self._isPlainObject(results)) {\n\n                                        if (self._isPlainObject(results.options)) {\n                                            msg[2] = results.options;\n                                        }\n\n                                        if (self._isArray(results.argsList)) {\n                                            msg.push(results.argsList);\n                                        } else if (typeof (results.argsList) !== 'undefined') {\n                                            msg.push([results.argsList]);\n                                        }\n\n                                        if (self._isPlainObject(results.argsDict)) {\n                                            if (msg.length === 3) {\n                                                msg.push([]);\n                                            }\n                                            msg.push(results.argsDict);\n                                        }\n                                    } else {\n                                        msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n                                    }\n                                    self._send(msg);\n                                },\n                                invoke_error_handler = ({ details, error, argsList, argsDict }) => {\n                                    let msg = [WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                                        data[1], details || {}, error || 'wamp.error.invocation_exception'];\n\n                                    if (argsList && self._isArray(argsList)) {\n                                        msg.push(argsList);\n                                    }\n\n                                    if (argsDict && self._isPlainObject(argsDict)) {\n                                        if (msg.length === 5) {\n                                            msg.push([]);\n                                        }\n                                        msg.push(argsDict);\n                                    }\n                                    self._send(msg);\n                                };\n\n                            p = new Promise((resolve, reject) => {\n                                resolve(this._rpcRegs[data[2]].callbacks[0]({\n                                    details       : data[3],\n                                    argsList      : data[4],\n                                    argsDict      : data[5],\n                                    result_handler: invoke_result_handler,\n                                    error_handler : invoke_error_handler\n                                }));\n                            });\n\n                            p.then((results) => {\n                                invoke_result_handler(results);\n                            }).catch(e => {\n                                invoke_error_handler(e);\n                            });\n\n                        } else {\n                            // WAMP SPEC: [ERROR, INVOCATION, INVOCATION.Request|id, Details|dict, Error|uri]\n                            this._send([WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                                data[1], {}, 'wamp.error.no_such_procedure']);\n                            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_INVOCATION;\n                        }\n                    }\n                    break;\n                // case WAMP_MSG_SPEC.INTERRUPT:\n                //     // WAMP SPEC:\n                //     break;\n                // case WAMP_MSG_SPEC.YIELD:\n                //     // WAMP SPEC:\n                //     break;\n                default:\n                    this._hardClose('wamp.error.protocol_violation', 'Received non-compliant WAMP message');\n                    break;\n            }\n        }, err => {\n            this._hardClose('wamp.error.protocol_violation', 'Can not decode received message');\n        });\n    }\n\n    /**\n     * Internal websocket on error callback\n     * @param {object} error\n     * @private\n     */\n    _wsOnError (error) {\n        this._log('[wampy] websocket error');\n\n        if (this._options.onError) {\n            this._options.onError({ error });\n        }\n    }\n\n    /**\n     * Reconnect to server in case of websocket error\n     * @private\n     */\n    _wsReconnect () {\n        this._log('[wampy] websocket reconnecting...');\n\n        if (this._options.onReconnect) {\n            this._options.onReconnect();\n        }\n\n        this._cache.reconnectingAttempts++;\n        this._ws = getWebSocket(this._url, this._protocols, this._options.ws);\n        this._initWsCallbacks();\n    }\n\n    /**\n     * Resubscribe to topics in case of communication error\n     * @private\n     */\n    _renewSubscriptions () {\n        let i;\n        const subs = this._subscriptions,\n            st = this._subsTopics;\n\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n\n        for (let topic of st) {\n            i = subs[topic].callbacks.length;\n            while (i--) {\n                this.subscribe(topic, subs[topic].callbacks[i]);\n            }\n        }\n    }\n\n    /**\n     * Reregister RPCs in case of communication error\n     * @private\n     */\n    _renewRegistrations () {\n        const rpcs = this._rpcRegs,\n            rn = this._rpcNames;\n\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        for (let rpcName of rn) {\n            this.register(rpcName, { rpc: rpcs[rpcName].callbacks[0] });\n        }\n    }\n\n    /* Wampy public API */\n\n    /**\n     * Get or set Wampy options\n     *\n     * To get options - call without parameters\n     * To set options - pass hash-table with options values\n     *\n     * @param {object} [opts]\n     * @returns {*}\n     */\n    options (opts) {\n        if (typeof (opts) === 'undefined') {\n            return this._options;\n        } else if (this._isPlainObject(opts)) {\n            this._options = this._merge(this._options, opts);\n            return this;\n        }\n    }\n\n    /**\n     * Get the status of last operation\n     *\n     * @returns {object} with 2 fields: code, description\n     *      code: 0 - if operation was successful\n     *      code > 0 - if error occurred\n     *      description contains details about error\n     *      reqId: last send request ID\n     */\n    getOpStatus () {\n        return this._cache.opStatus;\n    }\n\n    /**\n     * Get the WAMP Session ID\n     *\n     * @returns {string} Session ID\n     */\n    getSessionId () {\n        return this._cache.sessionId;\n    }\n\n    /**\n     * Connect to server\n     * @param {string} [url] New url (optional)\n     * @returns {Wampy}\n     */\n    connect (url) {\n        if (url) {\n            this._url = url;\n        }\n\n        if (this._options.realm) {\n\n            const authp = (this._options.authid ? 1 : 0) +\n                ((this._isArray(this._options.authmethods) && this._options.authmethods.length) ? 1 : 0) +\n                (typeof this._options.onChallenge === 'function' ? 1 : 0);\n\n            if (authp > 0 && authp < 3) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n                return this;\n            }\n\n            this._setWsProtocols();\n            this._ws = getWebSocket(this._url, this._protocols, this._options.ws);\n            if (!this._ws) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_WS_OR_URL;\n                return this;\n            }\n            this._initWsCallbacks();\n\n        } else {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_REALM;\n        }\n\n        return this;\n    }\n\n    /**\n     * Disconnect from server\n     * @returns {Wampy}\n     */\n    disconnect () {\n        if (this._cache.sessionId) {\n            // need to send goodbye message to server\n            this._cache.isSayingGoodbye = true;\n            this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.close.system_shutdown']);\n        } else if (this._ws) {\n            this._ws.close();\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n        return this;\n    }\n\n    /**\n     * Abort WAMP session establishment\n     *\n     * @returns {Wampy}\n     */\n    abort () {\n\n        if (!this._cache.sessionId && this._ws.readyState === 1) {\n            this._send([WAMP_MSG_SPEC.ABORT, {}, 'wamp.error.abort']);\n            this._cache.sessionId = null;\n        }\n\n        this._ws.close();\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n        return this;\n    }\n\n    /**\n     * Subscribe to a topic on a broker\n     *\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as published event callback\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called when subscribe would be confirmed\n     *                            onError: will be called if subscribe would be aborted\n     *                            onEvent: will be called on receiving published event }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { match: string matching policy (\"prefix\"|\"wildcard\") }\n     *\n     * @returns {Wampy}\n     */\n    subscribe (topicURI, callbacks, advancedOptions) {\n        let reqId, patternBased = false;\n        const options = {};\n\n        if ((typeof (advancedOptions) !== 'undefined') &&\n            (this._isPlainObject(advancedOptions)) &&\n            (advancedOptions.hasOwnProperty('match'))) {\n\n            if (/prefix|wildcard/.test(advancedOptions.match)) {\n                options.match = advancedOptions.match;\n                patternBased = true;\n            }\n        }\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: patternBased, allowWAMP: true }, 'broker', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onEvent: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onEvent) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if (!this._subscriptions[topicURI] || !this._subscriptions[topicURI].callbacks.length) {\n            // no such subscription or processing unsubscribing\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP SPEC: [SUBSCRIBE, Request|id, Options|dict, Topic|uri]\n            this._send([WAMP_MSG_SPEC.SUBSCRIBE, reqId, options, topicURI]);\n\n        } else {    // already have subscription to this topic\n            // There is no such callback yet\n            if (this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent) < 0) {\n                this._subscriptions[topicURI].callbacks.push(callbacks.onEvent);\n            }\n\n            if (callbacks.onSuccess) {\n                callbacks.onSuccess();\n            }\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Unsubscribe from topic\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as\n     *                          published event callback to remove or it can be hash table of callbacks:\n     *                          { onSuccess: will be called when unsubscribe would be confirmed\n     *                            onError: will be called if unsubscribe would be aborted\n     *                            onEvent: published event callback to remove }\n     * @returns {Wampy}\n     */\n    unsubscribe (topicURI, callbacks) {\n        let reqId, i = -1;\n\n        if (!this._preReqChecks(null, 'broker', callbacks)) {\n            return this;\n        }\n\n        if (this._subscriptions[topicURI]) {\n\n            reqId = this._getReqId();\n\n            if (typeof (callbacks) === 'undefined') {\n                this._subscriptions[topicURI].callbacks = [];\n                callbacks = {};\n            } else if (typeof callbacks === 'function') {\n                i = this._subscriptions[topicURI].callbacks.indexOf(callbacks);\n                callbacks = {};\n            } else if (callbacks.onEvent && typeof callbacks.onEvent === 'function') {\n                i = this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent);\n            } else {\n                this._subscriptions[topicURI].callbacks = [];\n            }\n\n            if (i >= 0) {\n                this._subscriptions[topicURI].callbacks.splice(i, 1);\n            }\n\n            if (this._subscriptions[topicURI].callbacks.length) {\n                // There are another callbacks for this topic\n                this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n                return this;\n            }\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP_SPEC: [UNSUBSCRIBE, Request|id, SUBSCRIBED.Subscription|id]\n            this._send([WAMP_MSG_SPEC.UNSUBSCRIBE, reqId, this._subscriptions[topicURI].id]);\n\n        } else {\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_UNSUBSCRIBE;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Publish a event to topic\n     * @param {string} topicURI\n     * @param {string|number|Array|object} payload - can be either a value of any type or null.  Also it\n     *                          is possible to pass array and object-like data simultaneously.\n     *                          In this case pass a hash-table with next attributes:\n     *                          {\n     *                             argsList: array payload (may be omitted)\n     *                             argsDict: object payload (may be omitted)\n     *                          }\n     * @param {object} [callbacks] - optional hash table of callbacks:\n     *                          { onSuccess: will be called when publishing would be confirmed\n     *                            onError: will be called if publishing would be aborted }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { exclude: integer|array WAMP session id(s) that won't receive a published event,\n     *                                      even though they may be subscribed\n     *                            exclude_authid: string|array Authentication id(s) that won't receive\n     *                                      a published event, even though they may be subscribed\n     *                            exclude_authrole: string|array Authentication role(s) that won't receive\n     *                                      a published event, even though they may be subscribed\n     *                            eligible: integer|array WAMP session id(s) that are allowed\n     *                                      to receive a published event\n     *                            eligible_authid: string|array Authentication id(s) that are allowed\n     *                                      to receive a published event\n     *                            eligible_authrole: string|array Authentication role(s) that are allowed\n     *                                      to receive a published event\n     *                            exclude_me: bool flag of receiving publishing event by initiator\n     *                            disclose_me: bool flag of disclosure of publisher identity (its WAMP session ID)\n     *                                      to receivers of a published event }\n     * @returns {Wampy}\n     */\n    publish (topicURI, payload, callbacks, advancedOptions) {\n        let reqId, msg, err = false, hasPayload = false;\n        const options = {},\n            _optionsConvertHelper = (option, sourceType) => {\n                if (advancedOptions[option]) {\n                    if (this._isArray(advancedOptions[option]) && advancedOptions[option].length) {\n                        options[option] = advancedOptions[option];\n                    } else if (typeof advancedOptions[option] === sourceType) {\n                        options[option] = [advancedOptions[option]];\n                    } else {\n                        err = true;\n                    }\n                }\n            };\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: false }, 'broker', callbacks)) {\n            return this;\n        }\n\n        if (this._isPlainObject(callbacks)) {\n            options.acknowledge = true;\n        }\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n                _optionsConvertHelper('exclude', 'number');\n                _optionsConvertHelper('exclude_authid', 'string');\n                _optionsConvertHelper('exclude_authrole', 'string');\n                _optionsConvertHelper('eligible', 'number');\n                _optionsConvertHelper('eligible_authid', 'string');\n                _optionsConvertHelper('eligible_authrole', 'string');\n\n                if (advancedOptions.hasOwnProperty('exclude_me')) {\n                    options.exclude_me = advancedOptions.exclude_me !== false;\n                }\n\n                if (advancedOptions.hasOwnProperty('disclose_me')) {\n                    options.disclose_me = advancedOptions.disclose_me === true;\n                }\n\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError({ error: this._cache.opStatus.description });\n                }\n\n                return this;\n            }\n        }\n\n        reqId = this._getReqId();\n\n        switch (arguments.length) {\n            case 1:\n                break;\n            case 2:\n                hasPayload = true;\n                break;\n            default:\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks\n                };\n                hasPayload = true;\n                break;\n        }\n\n        // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri]\n        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI];\n\n        if (hasPayload) {\n            // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list (, ArgumentsKw|dict)]\n            if (this._isArray(payload)) {\n                msg.push(payload);\n            } else if (this._isPlainObject(payload)) {\n                // It's a wampy unified form of payload passing\n                if (payload.argsList || payload.argsDict) {\n                    if (payload.argsList) {\n                        msg.push(payload.argsList);\n                    }\n\n                    if (payload.argsDict) {\n                        if (msg.length === 4) {\n                            msg.push([]);\n                        }\n                        msg.push(payload.argsDict);\n                    }\n                } else {\n                    msg.push([], payload);\n                }\n            } else {    // assume it's a single value\n                msg.push([payload]);\n            }\n        }\n\n        this._send(msg);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Remote Procedure Call\n     * @param {string} topicURI\n     * @param {string|number|Array|object} payload - can be either a value of any type or null.  Also it\n     *                          is possible to pass array and object-like data simultaneously.\n     *                          In this case pass a hash-table with next attributes:\n     *                          {\n     *                             argsList: array payload (may be omitted)\n     *                             argsDict: object payload (may be omitted)\n     *                          }\n     * @param {function|object} callbacks - if it is a function - it will be treated as result callback function\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called with result on successful call\n     *                            onError: will be called if invocation would be aborted }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { disclose_me: bool flag of disclosure of Caller identity (WAMP session ID)\n     *                                  to endpoints of a routed call\n     *                            receive_progress: bool flag for receiving progressive results. In this case\n     *                                  onSuccess function will be called every time on receiving result\n     *                            timeout: integer timeout (in ms) for the call to finish }\n     * @returns {Wampy}\n     */\n    call (topicURI, payload, callbacks, advancedOptions) {\n        let reqId, msg, err = false;\n        const options = {};\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: true }, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onSuccess: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onSuccess) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n                if (advancedOptions.hasOwnProperty('disclose_me')) {\n                    options.disclose_me = advancedOptions.disclose_me === true;\n                }\n\n                if (advancedOptions.hasOwnProperty('receive_progress')) {\n                    options.receive_progress = advancedOptions.receive_progress === true;\n                }\n\n                if (advancedOptions.hasOwnProperty('timeout')) {\n                    if (typeof advancedOptions.timeout === 'number') {\n                        options.timeout = advancedOptions.timeout;\n                    } else {\n                        err = true;\n                    }\n                }\n\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError({ error: this._cache.opStatus.description });\n                }\n\n                return this;\n            }\n        }\n\n        do {\n            reqId = this._getReqId();\n        } while (reqId in this._calls);\n\n        this._calls[reqId] = callbacks;\n\n        // WAMP SPEC: [CALL, Request|id, Options|dict, Procedure|uri, (Arguments|list, ArgumentsKw|dict)]\n        msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI];\n\n        if (payload !== null) {\n            if (this._isArray(payload)) {\n                msg.push(payload);\n            } else if (this._isPlainObject(payload)) {\n                // It's a wampy unified form of payload passing\n                if (payload.argsList || payload.argsDict) {\n                    if (payload.argsList) {\n                        msg.push(payload.argsList);\n                    }\n\n                    if (payload.argsDict) {\n                        if (msg.length === 4) {\n                            msg.push([]);\n                        }\n                        msg.push(payload.argsDict);\n                    }\n                } else {\n                    msg.push([], payload);\n                }\n            } else {    // assume it's a single value\n                msg.push([payload]);\n            }\n        }\n\n        this._send(msg);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * RPC invocation cancelling\n     *\n     * @param {int} reqId RPC call request ID\n     * @param {function|object} callbacks - if it is a function - it will be called if successfully\n     *                          sent canceling message or it can be hash table of callbacks:\n     *                          { onSuccess: will be called if successfully sent canceling message\n     *                            onError: will be called if some error occurred }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { mode: string|one of the possible modes:\n     *                                  \"skip\" | \"kill\" | \"killnowait\". Skip is default.\n     *                          }\n     *\n     * @returns {Wampy}\n     */\n    cancel (reqId, callbacks, advancedOptions) {\n        let err = false;\n        const options = {};\n\n        if (!this._preReqChecks(null, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (!reqId || !this._calls[reqId]) {\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_REQ_ID;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n\n                if (advancedOptions.hasOwnProperty('mode')) {\n                    if (/skip|kill|killnowait/.test(advancedOptions.mode)) {\n                        options.mode = advancedOptions.mode;\n                    } else {\n                        err = true;\n                    }\n\n                }\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError({ error: this._cache.opStatus.description });\n                }\n\n                return this;\n            }\n        }\n\n        // WAMP SPEC: [CANCEL, CALL.Request|id, Options|dict]\n        this._send([WAMP_MSG_SPEC.CANCEL, reqId, options]);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n\n        callbacks.onSuccess && callbacks.onSuccess();\n\n        return this;\n    }\n\n    /**\n     * RPC registration for invocation\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as rpc itself\n     *                          or it can be hash table of callbacks:\n     *                          { rpc: registered procedure\n     *                            onSuccess: will be called on successful registration\n     *                            onError: will be called if registration would be aborted }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          {\n     *                              match: string matching policy (\"prefix\"|\"wildcard\")\n     *                              invoke: string invocation policy (\"single\"|\"roundrobin\"|\"random\"|\"first\"|\"last\")\n     *                          }\n     * @returns {Wampy}\n     */\n    register (topicURI, callbacks, advancedOptions) {\n        let reqId, patternBased = false, err = false;\n        const options = {};\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n\n                if (advancedOptions.hasOwnProperty('match')) {\n                    if (/prefix|wildcard/.test(advancedOptions.match)) {\n                        options.match = advancedOptions.match;\n                        patternBased = true;\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.hasOwnProperty('invoke')) {\n                    if (/single|roundrobin|random|first|last/.test(advancedOptions.invoke)) {\n                        options.invoke = advancedOptions.invoke;\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.hasOwnProperty('force_reregister')) {\n                    if (advancedOptions.force_reregister) {\n                        options.force_reregister = true;\n                    } else {\n                        err = true;\n                    }\n                }\n\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError({ error: this._cache.opStatus.description });\n                }\n\n                return this;\n            }\n        }\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: patternBased, allowWAMP: false }, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { rpc: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.rpc) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if (!this._rpcRegs[topicURI] || !this._rpcRegs[topicURI].callbacks.length) {\n            // no such registration or processing unregistering\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP SPEC: [REGISTER, Request|id, Options|dict, Procedure|uri]\n            this._send([WAMP_MSG_SPEC.REGISTER, reqId, options, topicURI]);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // already have registration with such topicURI\n            this._cache.opStatus = WAMP_ERROR_MSG.RPC_ALREADY_REGISTERED;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n        }\n\n        return this;\n\n    }\n\n    /**\n     * RPC unregistration for invocation\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function, it will be called on successful unregistration\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called on successful unregistration\n     *                            onError: will be called if unregistration would be aborted }\n     * @returns {Wampy}\n     */\n    unregister (topicURI, callbacks) {\n        let reqId;\n\n        if (!this._preReqChecks({ topic: topicURI, patternBased: false, allowWAMP: false }, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onSuccess: callbacks };\n        }\n\n        if (this._rpcRegs[topicURI]) {   // there is such registration\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks\n            };\n\n            // WAMP SPEC: [UNREGISTER, Request|id, REGISTERED.Registration|id]\n            this._send([WAMP_MSG_SPEC.UNREGISTER, reqId, this._rpcRegs[topicURI].id]);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // there is no registration with such topicURI\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_UNREG;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n        }\n\n        return this;\n    }\n}\n\nconst EXPORTED_SYMBOLS = ['Wampy'];\n"]}